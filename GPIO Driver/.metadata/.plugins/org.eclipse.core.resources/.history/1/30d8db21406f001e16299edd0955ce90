/*******************************************************************************************************
 * File Name : DRV_Program.c
 *
 * Data : 8 / 6 / 2023
 *
 * Description:
 *
 * Author : Yassmin Yasser El-Araby
 *******************************************************************************************************/
#include "DRV_Config.h"
#include "DRV_Interface.h"
#include "DRV_Private.h"
#include "avr/io.h" /* To use the IO Ports Registers */

/********************************************************************************************************
 *                                                                                                      *
 *                                    Function Definition                                               *
 *                                                                                                      *
 ********************************************************************************************************/
/*
 *
 * Description
 * Setup the direction of the required pin input/output
 * If the input port number or pin number are not correct, the function will not handle the request
 */
void GPIO_SetupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
		{
		case PORTA_ID:
			if(direction == PIN_INPUT)
			{
				CLEAR_BIT(DDRA,pin_num);
			}
			else
			{
				SET_BIT(DDRA,pin_num);
			}
			break;

		case PORTB_ID:
			if(direction == PIN_INPUT)
			{
				CLEAR_BIT(DDRB,pin_num);
			}
			else
			{
				SET_BIT(DDRB,pin_num);
			}
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
			{
				CLEAR_BIT(DDRC,pin_num);
			}
			else
			{
				SET_BIT(DDRC,pin_num);
			}
			break;
		case PORTD_ID:
			if(direction == PIN_INPUT)
			{
				CLEAR_BIT(DDRD,pin_num);
			}
			else
			{
				SET_BIT(DDRD,pin_num);
			}
			break;
		}
	}
}

/*
 * Description
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, the function will not handle the request
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
void GPIO_SetupPinValue(uint8 port_num, uint8 pin_num, uint8 value)
{
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
	{
			/*Do Nothing*/
	}
	else
	{
         case PORTA_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;

		 case PORTB_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;

		 case PORTC_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;

			break;
		 case PORTD_ID:
			if(value == LOGIC_HIGH)
			{
				SET_BIT(PORTA,pin_num);
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
			}
			break;
		}
}


/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_GetPinValue(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;

	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
	{
		/*Do Nothing*/
	}
	else
	{
	  case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;

	   case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
			}
			break;
	}
	return pin_value;
}


/*
 * Description :
 * Toggle the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
void GPIO_TogglePinValue(uint8 port_num, uint8 pin_num)
{
	if( (port_num >= NUM_OF_PORTS))
	{
		/*Do Nothing*/
	}
	else
	{
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
			break;

		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
			break;

		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
			break;

		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
			break;
	}
}

/*
 *
 * Description
 * Setup the direction of the required port input/output
 * If the input port number are not correct, the function will not handle the request
 */
void GPIO_SetupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
	if( (port_num >= NUM_OF_PORTS))
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
		{
		case PORTA_ID:
			DDRA = direction;
			break;
		case PORTB_ID:
			DDRB = direction;
			break;
		case PORTC_ID:
			DDRC = direction;
			break;
		}
	}
}

/*
 * Description
 * Write the value Logic High or Logic Low on the required port.
 * If the input port number are not correct, the function will not handle the request
 * If the input port number are not correct, The function will return Logic Low.
 */
void GPIO_SetupPortValue(uint8 port_num, uint8 value)
{
	if( (port_num >= NUM_OF_PORTS))
		{
				/*Do Nothing*/
		}
		else
		{
           case PORTA_ID:
        	   PORTA = value;
        	   break;

           case PORTB_ID:
                PORTB = value;
                break;

           case PORTC_ID:
                PORTC = value;
                break;
           case PORTD_ID:
                PORTD = value;
                break;
		}
}

/*
 * Description :
 * Read and return the value for the required port, it should be Logic High or Logic Low.
 * If the input port number are not correct, The function will return Logic Low.
 */
uint8 GPIO_GetPortValue(uint8 port_num)
{
	uint8 port_value = LOGIC_LOW;

	if( (port_num >= NUM_OF_PORTS))
	{
		/*Do Nothing*/
	}
	else
	{
		case PORTA_ID:
			port_value = PINA;
			break;

		case PORTB_ID:
			port_value = PINB;
			break;

		case PORTC_ID:
			port_value = PINC;
			break;

		case PORTD_ID:
			port_value = PIND;
			break;
	}
	return port_value;
}


