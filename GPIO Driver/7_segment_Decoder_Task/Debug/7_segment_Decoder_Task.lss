
7_segment_Decoder_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000fa8  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000be9  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c9 05 	call	0xb92	; 0xb92 <main>
  64:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Eta32mini_SevenSegment_SetPinDirection>:
/*
 * Description :
 * Setup the direction of the Decoder and 7-segment pins input/output.
 */
void Eta32mini_SevenSegment_SetPinDirection(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/*Set up the direction of the 7-segment pins as output*/
	GPIO_SetupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	66 e0       	ldi	r22, 0x06	; 6
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	65 e0       	ldi	r22, 0x05	; 5
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTA_ID,PIN2_ID,PIN_OUTPUT);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	62 e0       	ldi	r22, 0x02	; 2
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTA_ID,PIN3_ID,PIN_OUTPUT);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>

	/*Set up the direction of the Decoder pins as output*/
	GPIO_SetupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTB_ID,PIN2_ID,PIN_OUTPUT);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
	GPIO_SetupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	0e 94 1b 02 	call	0x436	; 0x436 <GPIO_SetupPinDirection>
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <Eta32mini_SevenSegment_Display>:
/*
 * Description :
 * Setup the Value you need to display to the Decoder.
 */
void Eta32mini_SevenSegment_Display(uint8 value)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	00 d0       	rcall	.+0      	; 0xd0 <Eta32mini_SevenSegment_Display+0x6>
  d0:	0f 92       	push	r0
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	89 83       	std	Y+1, r24	; 0x01
	switch(value)
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	3b 83       	std	Y+3, r19	; 0x03
  e0:	2a 83       	std	Y+2, r18	; 0x02
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	9b 81       	ldd	r25, Y+3	; 0x03
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	91 05       	cpc	r25, r1
  ea:	61 f1       	breq	.+88     	; 0x144 <Eta32mini_SevenSegment_Display+0x7a>
  ec:	2a 81       	ldd	r18, Y+2	; 0x02
  ee:	3b 81       	ldd	r19, Y+3	; 0x03
  f0:	23 30       	cpi	r18, 0x03	; 3
  f2:	31 05       	cpc	r19, r1
  f4:	34 f4       	brge	.+12     	; 0x102 <Eta32mini_SevenSegment_Display+0x38>
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	9b 81       	ldd	r25, Y+3	; 0x03
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 05       	cpc	r25, r1
  fe:	69 f0       	breq	.+26     	; 0x11a <Eta32mini_SevenSegment_Display+0x50>
 100:	5f c0       	rjmp	.+190    	; 0x1c0 <Eta32mini_SevenSegment_Display+0xf6>
 102:	2a 81       	ldd	r18, Y+2	; 0x02
 104:	3b 81       	ldd	r19, Y+3	; 0x03
 106:	23 30       	cpi	r18, 0x03	; 3
 108:	31 05       	cpc	r19, r1
 10a:	89 f1       	breq	.+98     	; 0x16e <Eta32mini_SevenSegment_Display+0xa4>
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	84 30       	cpi	r24, 0x04	; 4
 112:	91 05       	cpc	r25, r1
 114:	09 f4       	brne	.+2      	; 0x118 <Eta32mini_SevenSegment_Display+0x4e>
 116:	40 c0       	rjmp	.+128    	; 0x198 <Eta32mini_SevenSegment_Display+0xce>
 118:	53 c0       	rjmp	.+166    	; 0x1c0 <Eta32mini_SevenSegment_Display+0xf6>
	{
	case 1:
		GPIO_SetupPinValue(PORTB_ID,PIN6_ID,LOGIC_LOW);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN5_ID,LOGIC_HIGH);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	65 e0       	ldi	r22, 0x05	; 5
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN2_ID,LOGIC_HIGH);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN3_ID,LOGIC_HIGH);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 142:	3e c0       	rjmp	.+124    	; 0x1c0 <Eta32mini_SevenSegment_Display+0xf6>
		break;

	case 2:
		GPIO_SetupPinValue(PORTB_ID,PIN6_ID,LOGIC_HIGH);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	66 e0       	ldi	r22, 0x06	; 6
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN5_ID,LOGIC_LOW);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	65 e0       	ldi	r22, 0x05	; 5
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN2_ID,LOGIC_HIGH);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN3_ID,LOGIC_HIGH);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 16c:	29 c0       	rjmp	.+82     	; 0x1c0 <Eta32mini_SevenSegment_Display+0xf6>
		break;

	case 3:
		GPIO_SetupPinValue(PORTB_ID,PIN6_ID,LOGIC_HIGH);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN5_ID,LOGIC_HIGH);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN2_ID,LOGIC_LOW);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN3_ID,LOGIC_HIGH);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 196:	14 c0       	rjmp	.+40     	; 0x1c0 <Eta32mini_SevenSegment_Display+0xf6>
		break;

	case 4:
		GPIO_SetupPinValue(PORTB_ID,PIN6_ID,LOGIC_HIGH);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN5_ID,LOGIC_HIGH);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	65 e0       	ldi	r22, 0x05	; 5
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN2_ID,LOGIC_HIGH);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTA_ID,PIN3_ID,LOGIC_LOW);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		break;
	}
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <Decoder_SevenSegment_Display>:
/*
 * Description :
 * Setup the Value you need to display to the Decoder.
 */
void Decoder_SevenSegment_Display(uint8 number, uint8 value)
{
 1cc:	df 93       	push	r29
 1ce:	cf 93       	push	r28
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <Decoder_SevenSegment_Display+0x6>
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <Decoder_SevenSegment_Display+0x8>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	89 83       	std	Y+1, r24	; 0x01
 1da:	6a 83       	std	Y+2, r22	; 0x02
	Eta32mini_SevenSegment_Display(value);
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	0e 94 65 00 	call	0xca	; 0xca <Eta32mini_SevenSegment_Display>

	switch(number)
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	3c 83       	std	Y+4, r19	; 0x04
 1ea:	2b 83       	std	Y+3, r18	; 0x03
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	9c 81       	ldd	r25, Y+4	; 0x04
 1f0:	84 30       	cpi	r24, 0x04	; 4
 1f2:	91 05       	cpc	r25, r1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <Decoder_SevenSegment_Display+0x2c>
 1f6:	9b c0       	rjmp	.+310    	; 0x32e <Decoder_SevenSegment_Display+0x162>
 1f8:	2b 81       	ldd	r18, Y+3	; 0x03
 1fa:	3c 81       	ldd	r19, Y+4	; 0x04
 1fc:	25 30       	cpi	r18, 0x05	; 5
 1fe:	31 05       	cpc	r19, r1
 200:	ec f4       	brge	.+58     	; 0x23c <Decoder_SevenSegment_Display+0x70>
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	91 05       	cpc	r25, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <Decoder_SevenSegment_Display+0x42>
 20c:	51 c0       	rjmp	.+162    	; 0x2b0 <Decoder_SevenSegment_Display+0xe4>
 20e:	2b 81       	ldd	r18, Y+3	; 0x03
 210:	3c 81       	ldd	r19, Y+4	; 0x04
 212:	22 30       	cpi	r18, 0x02	; 2
 214:	31 05       	cpc	r19, r1
 216:	2c f4       	brge	.+10     	; 0x222 <Decoder_SevenSegment_Display+0x56>
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	99 f1       	breq	.+102    	; 0x286 <Decoder_SevenSegment_Display+0xba>
 220:	03 c1       	rjmp	.+518    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
 222:	2b 81       	ldd	r18, Y+3	; 0x03
 224:	3c 81       	ldd	r19, Y+4	; 0x04
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	31 05       	cpc	r19, r1
 22a:	09 f4       	brne	.+2      	; 0x22e <Decoder_SevenSegment_Display+0x62>
 22c:	56 c0       	rjmp	.+172    	; 0x2da <Decoder_SevenSegment_Display+0x10e>
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	91 05       	cpc	r25, r1
 236:	09 f4       	brne	.+2      	; 0x23a <Decoder_SevenSegment_Display+0x6e>
 238:	65 c0       	rjmp	.+202    	; 0x304 <Decoder_SevenSegment_Display+0x138>
 23a:	f6 c0       	rjmp	.+492    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	3c 81       	ldd	r19, Y+4	; 0x04
 240:	27 30       	cpi	r18, 0x07	; 7
 242:	31 05       	cpc	r19, r1
 244:	09 f4       	brne	.+2      	; 0x248 <Decoder_SevenSegment_Display+0x7c>
 246:	b2 c0       	rjmp	.+356    	; 0x3ac <Decoder_SevenSegment_Display+0x1e0>
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	91 05       	cpc	r25, r1
 250:	6c f4       	brge	.+26     	; 0x26c <Decoder_SevenSegment_Display+0xa0>
 252:	2b 81       	ldd	r18, Y+3	; 0x03
 254:	3c 81       	ldd	r19, Y+4	; 0x04
 256:	25 30       	cpi	r18, 0x05	; 5
 258:	31 05       	cpc	r19, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <Decoder_SevenSegment_Display+0x92>
 25c:	7d c0       	rjmp	.+250    	; 0x358 <Decoder_SevenSegment_Display+0x18c>
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	9c 81       	ldd	r25, Y+4	; 0x04
 262:	86 30       	cpi	r24, 0x06	; 6
 264:	91 05       	cpc	r25, r1
 266:	09 f4       	brne	.+2      	; 0x26a <Decoder_SevenSegment_Display+0x9e>
 268:	8c c0       	rjmp	.+280    	; 0x382 <Decoder_SevenSegment_Display+0x1b6>
 26a:	de c0       	rjmp	.+444    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
 26c:	2b 81       	ldd	r18, Y+3	; 0x03
 26e:	3c 81       	ldd	r19, Y+4	; 0x04
 270:	28 30       	cpi	r18, 0x08	; 8
 272:	31 05       	cpc	r19, r1
 274:	09 f4       	brne	.+2      	; 0x278 <Decoder_SevenSegment_Display+0xac>
 276:	af c0       	rjmp	.+350    	; 0x3d6 <Decoder_SevenSegment_Display+0x20a>
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	89 30       	cpi	r24, 0x09	; 9
 27e:	91 05       	cpc	r25, r1
 280:	09 f4       	brne	.+2      	; 0x284 <Decoder_SevenSegment_Display+0xb8>
 282:	be c0       	rjmp	.+380    	; 0x400 <Decoder_SevenSegment_Display+0x234>
 284:	d1 c0       	rjmp	.+418    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
	{
	case 0:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_LOW);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 2ae:	bc c0       	rjmp	.+376    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 1:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	62 e0       	ldi	r22, 0x02	; 2
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 2d8:	a7 c0       	rjmp	.+334    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 2:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_LOW);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_HIGH);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	64 e0       	ldi	r22, 0x04	; 4
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 302:	92 c0       	rjmp	.+292    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 3:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_HIGH);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 32c:	7d c0       	rjmp	.+250    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 4:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_LOW);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_HIGH);
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 356:	68 c0       	rjmp	.+208    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 5:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_HIGH);
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	64 e0       	ldi	r22, 0x04	; 4
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 380:	53 c0       	rjmp	.+166    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 6:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_LOW);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_HIGH);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_HIGH);
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	64 e0       	ldi	r22, 0x04	; 4
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 3aa:	3e c0       	rjmp	.+124    	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 7:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_HIGH);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_HIGH);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	62 e0       	ldi	r22, 0x02	; 2
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	64 e0       	ldi	r22, 0x04	; 4
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 3d4:	29 c0       	rjmp	.+82     	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 8:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_LOW);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	64 e0       	ldi	r22, 0x04	; 4
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
 3fe:	14 c0       	rjmp	.+40     	; 0x428 <Decoder_SevenSegment_Display+0x25c>
		break;

	case 9:
		GPIO_SetupPinValue(PORTB_ID,PIN0_ID,LOGIC_HIGH);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN1_ID,LOGIC_LOW);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN2_ID,LOGIC_LOW);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		GPIO_SetupPinValue(PORTB_ID,PIN4_ID,LOGIC_HIGH);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	64 e0       	ldi	r22, 0x04	; 4
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_SetupPinValue>
		break;
	}
}
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	cf 91       	pop	r28
 432:	df 91       	pop	r29
 434:	08 95       	ret

00000436 <GPIO_SetupPinDirection>:
 * Description
 * Setup the direction of the required pin input/output
 * If the input port number or pin number are not correct, the function will not handle the request
 */
void GPIO_SetupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 436:	df 93       	push	r29
 438:	cf 93       	push	r28
 43a:	00 d0       	rcall	.+0      	; 0x43c <GPIO_SetupPinDirection+0x6>
 43c:	00 d0       	rcall	.+0      	; 0x43e <GPIO_SetupPinDirection+0x8>
 43e:	0f 92       	push	r0
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	6a 83       	std	Y+2, r22	; 0x02
 448:	4b 83       	std	Y+3, r20	; 0x03
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	84 30       	cpi	r24, 0x04	; 4
 44e:	08 f0       	brcs	.+2      	; 0x452 <GPIO_SetupPinDirection+0x1c>
 450:	d5 c0       	rjmp	.+426    	; 0x5fc <__stack+0x19d>
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	88 30       	cpi	r24, 0x08	; 8
 456:	08 f0       	brcs	.+2      	; 0x45a <GPIO_SetupPinDirection+0x24>
 458:	d1 c0       	rjmp	.+418    	; 0x5fc <__stack+0x19d>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	3d 83       	std	Y+5, r19	; 0x05
 462:	2c 83       	std	Y+4, r18	; 0x04
 464:	8c 81       	ldd	r24, Y+4	; 0x04
 466:	9d 81       	ldd	r25, Y+5	; 0x05
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	91 05       	cpc	r25, r1
 46c:	09 f4       	brne	.+2      	; 0x470 <__stack+0x11>
 46e:	43 c0       	rjmp	.+134    	; 0x4f6 <__stack+0x97>
 470:	2c 81       	ldd	r18, Y+4	; 0x04
 472:	3d 81       	ldd	r19, Y+5	; 0x05
 474:	22 30       	cpi	r18, 0x02	; 2
 476:	31 05       	cpc	r19, r1
 478:	2c f4       	brge	.+10     	; 0x484 <__stack+0x25>
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	9d 81       	ldd	r25, Y+5	; 0x05
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	71 f0       	breq	.+28     	; 0x49e <__stack+0x3f>
 482:	bc c0       	rjmp	.+376    	; 0x5fc <__stack+0x19d>
 484:	2c 81       	ldd	r18, Y+4	; 0x04
 486:	3d 81       	ldd	r19, Y+5	; 0x05
 488:	22 30       	cpi	r18, 0x02	; 2
 48a:	31 05       	cpc	r19, r1
 48c:	09 f4       	brne	.+2      	; 0x490 <__stack+0x31>
 48e:	5f c0       	rjmp	.+190    	; 0x54e <__stack+0xef>
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	9d 81       	ldd	r25, Y+5	; 0x05
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	91 05       	cpc	r25, r1
 498:	09 f4       	brne	.+2      	; 0x49c <__stack+0x3d>
 49a:	85 c0       	rjmp	.+266    	; 0x5a6 <__stack+0x147>
 49c:	af c0       	rjmp	.+350    	; 0x5fc <__stack+0x19d>
		{
		case PORTA_ID:
			if(direction == PIN_INPUT)
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	88 23       	and	r24, r24
 4a2:	a9 f4       	brne	.+42     	; 0x4ce <__stack+0x6f>
			{
				CLEAR_BIT(DDRA,pin_num);
 4a4:	aa e3       	ldi	r26, 0x3A	; 58
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	ea e3       	ldi	r30, 0x3A	; 58
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	48 2f       	mov	r20, r24
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 2e       	mov	r0, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__stack+0x63>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__stack+0x5f>
 4c6:	80 95       	com	r24
 4c8:	84 23       	and	r24, r20
 4ca:	8c 93       	st	X, r24
 4cc:	97 c0       	rjmp	.+302    	; 0x5fc <__stack+0x19d>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
 4ce:	aa e3       	ldi	r26, 0x3A	; 58
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ea e3       	ldi	r30, 0x3A	; 58
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__stack+0x89>
 4f0:	84 2b       	or	r24, r20
 4f2:	8c 93       	st	X, r24
 4f4:	83 c0       	rjmp	.+262    	; 0x5fc <__stack+0x19d>
			}
			break;

		case PORTB_ID:
			if(direction == PIN_INPUT)
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 23       	and	r24, r24
 4fa:	a9 f4       	brne	.+42     	; 0x526 <__stack+0xc7>
			{
				CLEAR_BIT(DDRB,pin_num);
 4fc:	a7 e3       	ldi	r26, 0x37	; 55
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e7 e3       	ldi	r30, 0x37	; 55
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 2e       	mov	r0, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <__stack+0xbb>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <__stack+0xb7>
 51e:	80 95       	com	r24
 520:	84 23       	and	r24, r20
 522:	8c 93       	st	X, r24
 524:	6b c0       	rjmp	.+214    	; 0x5fc <__stack+0x19d>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
 526:	a7 e3       	ldi	r26, 0x37	; 55
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e7 e3       	ldi	r30, 0x37	; 55
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__stack+0xe5>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <__stack+0xe1>
 548:	84 2b       	or	r24, r20
 54a:	8c 93       	st	X, r24
 54c:	57 c0       	rjmp	.+174    	; 0x5fc <__stack+0x19d>
			}
			break;

		case PORTC_ID:
			if(direction == PIN_INPUT)
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	88 23       	and	r24, r24
 552:	a9 f4       	brne	.+42     	; 0x57e <__stack+0x11f>
			{
				CLEAR_BIT(DDRC,pin_num);
 554:	a4 e3       	ldi	r26, 0x34	; 52
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e4 e3       	ldi	r30, 0x34	; 52
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	48 2f       	mov	r20, r24
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 2e       	mov	r0, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x113>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <__stack+0x10f>
 576:	80 95       	com	r24
 578:	84 23       	and	r24, r20
 57a:	8c 93       	st	X, r24
 57c:	3f c0       	rjmp	.+126    	; 0x5fc <__stack+0x19d>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
 57e:	a4 e3       	ldi	r26, 0x34	; 52
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e4 e3       	ldi	r30, 0x34	; 52
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 2e       	mov	r0, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <__stack+0x13d>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <__stack+0x139>
 5a0:	84 2b       	or	r24, r20
 5a2:	8c 93       	st	X, r24
 5a4:	2b c0       	rjmp	.+86     	; 0x5fc <__stack+0x19d>
			}
			break;

		case PORTD_ID:
			if(direction == PIN_INPUT)
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	88 23       	and	r24, r24
 5aa:	a9 f4       	brne	.+42     	; 0x5d6 <__stack+0x177>
			{
				CLEAR_BIT(DDRD,pin_num);
 5ac:	a1 e3       	ldi	r26, 0x31	; 49
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	e1 e3       	ldi	r30, 0x31	; 49
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	48 2f       	mov	r20, r24
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 2e       	mov	r0, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <__stack+0x16b>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <__stack+0x167>
 5ce:	80 95       	com	r24
 5d0:	84 23       	and	r24, r20
 5d2:	8c 93       	st	X, r24
 5d4:	13 c0       	rjmp	.+38     	; 0x5fc <__stack+0x19d>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
 5d6:	a1 e3       	ldi	r26, 0x31	; 49
 5d8:	b0 e0       	ldi	r27, 0x00	; 0
 5da:	e1 e3       	ldi	r30, 0x31	; 49
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	48 2f       	mov	r20, r24
 5e2:	8a 81       	ldd	r24, Y+2	; 0x02
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 2e       	mov	r0, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__stack+0x195>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <__stack+0x191>
 5f8:	84 2b       	or	r24, r20
 5fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	cf 91       	pop	r28
 608:	df 91       	pop	r29
 60a:	08 95       	ret

0000060c <GPIO_SetupPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, the function will not handle the request
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
void GPIO_SetupPinValue(uint8 port_num, uint8 pin_num, uint8 value)
{
 60c:	df 93       	push	r29
 60e:	cf 93       	push	r28
 610:	00 d0       	rcall	.+0      	; 0x612 <GPIO_SetupPinValue+0x6>
 612:	00 d0       	rcall	.+0      	; 0x614 <GPIO_SetupPinValue+0x8>
 614:	0f 92       	push	r0
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	6a 83       	std	Y+2, r22	; 0x02
 61e:	4b 83       	std	Y+3, r20	; 0x03
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	84 30       	cpi	r24, 0x04	; 4
 624:	08 f0       	brcs	.+2      	; 0x628 <GPIO_SetupPinValue+0x1c>
 626:	d5 c0       	rjmp	.+426    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	88 30       	cpi	r24, 0x08	; 8
 62c:	08 f0       	brcs	.+2      	; 0x630 <GPIO_SetupPinValue+0x24>
 62e:	d1 c0       	rjmp	.+418    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
	{
			/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	3d 83       	std	Y+5, r19	; 0x05
 638:	2c 83       	std	Y+4, r18	; 0x04
 63a:	8c 81       	ldd	r24, Y+4	; 0x04
 63c:	9d 81       	ldd	r25, Y+5	; 0x05
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	91 05       	cpc	r25, r1
 642:	09 f4       	brne	.+2      	; 0x646 <GPIO_SetupPinValue+0x3a>
 644:	43 c0       	rjmp	.+134    	; 0x6cc <GPIO_SetupPinValue+0xc0>
 646:	2c 81       	ldd	r18, Y+4	; 0x04
 648:	3d 81       	ldd	r19, Y+5	; 0x05
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	31 05       	cpc	r19, r1
 64e:	2c f4       	brge	.+10     	; 0x65a <GPIO_SetupPinValue+0x4e>
 650:	8c 81       	ldd	r24, Y+4	; 0x04
 652:	9d 81       	ldd	r25, Y+5	; 0x05
 654:	00 97       	sbiw	r24, 0x00	; 0
 656:	71 f0       	breq	.+28     	; 0x674 <GPIO_SetupPinValue+0x68>
 658:	bc c0       	rjmp	.+376    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
 65a:	2c 81       	ldd	r18, Y+4	; 0x04
 65c:	3d 81       	ldd	r19, Y+5	; 0x05
 65e:	22 30       	cpi	r18, 0x02	; 2
 660:	31 05       	cpc	r19, r1
 662:	09 f4       	brne	.+2      	; 0x666 <GPIO_SetupPinValue+0x5a>
 664:	5f c0       	rjmp	.+190    	; 0x724 <GPIO_SetupPinValue+0x118>
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	91 05       	cpc	r25, r1
 66e:	09 f4       	brne	.+2      	; 0x672 <GPIO_SetupPinValue+0x66>
 670:	85 c0       	rjmp	.+266    	; 0x77c <GPIO_SetupPinValue+0x170>
 672:	af c0       	rjmp	.+350    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	a1 f4       	brne	.+40     	; 0x6a2 <GPIO_SetupPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
 67a:	ab e3       	ldi	r26, 0x3B	; 59
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	eb e3       	ldi	r30, 0x3B	; 59
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	48 2f       	mov	r20, r24
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	28 2f       	mov	r18, r24
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 2e       	mov	r0, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <GPIO_SetupPinValue+0x8c>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <GPIO_SetupPinValue+0x88>
 69c:	84 2b       	or	r24, r20
 69e:	8c 93       	st	X, r24
 6a0:	98 c0       	rjmp	.+304    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 6a2:	ab e3       	ldi	r26, 0x3B	; 59
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	eb e3       	ldi	r30, 0x3B	; 59
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	48 2f       	mov	r20, r24
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	28 2f       	mov	r18, r24
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 2e       	mov	r0, r18
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <GPIO_SetupPinValue+0xb4>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	0a 94       	dec	r0
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <GPIO_SetupPinValue+0xb0>
 6c4:	80 95       	com	r24
 6c6:	84 23       	and	r24, r20
 6c8:	8c 93       	st	X, r24
 6ca:	83 c0       	rjmp	.+262    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == LOGIC_HIGH)
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	a1 f4       	brne	.+40     	; 0x6fa <GPIO_SetupPinValue+0xee>
			{
				SET_BIT(PORTA,pin_num);
 6d2:	ab e3       	ldi	r26, 0x3B	; 59
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	eb e3       	ldi	r30, 0x3B	; 59
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <GPIO_SetupPinValue+0xe4>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <GPIO_SetupPinValue+0xe0>
 6f4:	84 2b       	or	r24, r20
 6f6:	8c 93       	st	X, r24
 6f8:	6c c0       	rjmp	.+216    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 6fa:	ab e3       	ldi	r26, 0x3B	; 59
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	eb e3       	ldi	r30, 0x3B	; 59
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <GPIO_SetupPinValue+0x10c>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <GPIO_SetupPinValue+0x108>
 71c:	80 95       	com	r24
 71e:	84 23       	and	r24, r20
 720:	8c 93       	st	X, r24
 722:	57 c0       	rjmp	.+174    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			break;

		case PORTC_ID:
			if(value == LOGIC_HIGH)
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	a1 f4       	brne	.+40     	; 0x752 <GPIO_SetupPinValue+0x146>
			{
				SET_BIT(PORTA,pin_num);
 72a:	ab e3       	ldi	r26, 0x3B	; 59
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	eb e3       	ldi	r30, 0x3B	; 59
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	48 2f       	mov	r20, r24
 736:	8a 81       	ldd	r24, Y+2	; 0x02
 738:	28 2f       	mov	r18, r24
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 2e       	mov	r0, r18
 742:	02 c0       	rjmp	.+4      	; 0x748 <GPIO_SetupPinValue+0x13c>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	0a 94       	dec	r0
 74a:	e2 f7       	brpl	.-8      	; 0x744 <GPIO_SetupPinValue+0x138>
 74c:	84 2b       	or	r24, r20
 74e:	8c 93       	st	X, r24
 750:	40 c0       	rjmp	.+128    	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 752:	ab e3       	ldi	r26, 0x3B	; 59
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	eb e3       	ldi	r30, 0x3B	; 59
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	48 2f       	mov	r20, r24
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	28 2f       	mov	r18, r24
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	02 2e       	mov	r0, r18
 76a:	02 c0       	rjmp	.+4      	; 0x770 <GPIO_SetupPinValue+0x164>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <GPIO_SetupPinValue+0x160>
 774:	80 95       	com	r24
 776:	84 23       	and	r24, r20
 778:	8c 93       	st	X, r24
 77a:	2b c0       	rjmp	.+86     	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			break;

			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	a1 f4       	brne	.+40     	; 0x7aa <GPIO_SetupPinValue+0x19e>
			{
				SET_BIT(PORTA,pin_num);
 782:	ab e3       	ldi	r26, 0x3B	; 59
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	eb e3       	ldi	r30, 0x3B	; 59
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	48 2f       	mov	r20, r24
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 2e       	mov	r0, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <GPIO_SetupPinValue+0x194>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	0a 94       	dec	r0
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <GPIO_SetupPinValue+0x190>
 7a4:	84 2b       	or	r24, r20
 7a6:	8c 93       	st	X, r24
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <GPIO_SetupPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 7aa:	ab e3       	ldi	r26, 0x3B	; 59
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	eb e3       	ldi	r30, 0x3B	; 59
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	48 2f       	mov	r20, r24
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 2e       	mov	r0, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <GPIO_SetupPinValue+0x1bc>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <GPIO_SetupPinValue+0x1b8>
 7cc:	80 95       	com	r24
 7ce:	84 23       	and	r24, r20
 7d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	0f 90       	pop	r0
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	08 95       	ret

000007e2 <GPIO_GetPinValue>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_GetPinValue(uint8 port_num, uint8 pin_num)
{
 7e2:	df 93       	push	r29
 7e4:	cf 93       	push	r28
 7e6:	00 d0       	rcall	.+0      	; 0x7e8 <GPIO_GetPinValue+0x6>
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <GPIO_GetPinValue+0x8>
 7ea:	0f 92       	push	r0
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
 7f0:	8a 83       	std	Y+2, r24	; 0x02
 7f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 7f4:	19 82       	std	Y+1, r1	; 0x01

	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
 7f6:	8a 81       	ldd	r24, Y+2	; 0x02
 7f8:	84 30       	cpi	r24, 0x04	; 4
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <GPIO_GetPinValue+0x1c>
 7fc:	84 c0       	rjmp	.+264    	; 0x906 <GPIO_GetPinValue+0x124>
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	88 30       	cpi	r24, 0x08	; 8
 802:	08 f0       	brcs	.+2      	; 0x806 <GPIO_GetPinValue+0x24>
 804:	80 c0       	rjmp	.+256    	; 0x906 <GPIO_GetPinValue+0x124>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	3d 83       	std	Y+5, r19	; 0x05
 80e:	2c 83       	std	Y+4, r18	; 0x04
 810:	4c 81       	ldd	r20, Y+4	; 0x04
 812:	5d 81       	ldd	r21, Y+5	; 0x05
 814:	41 30       	cpi	r20, 0x01	; 1
 816:	51 05       	cpc	r21, r1
 818:	79 f1       	breq	.+94     	; 0x878 <GPIO_GetPinValue+0x96>
 81a:	8c 81       	ldd	r24, Y+4	; 0x04
 81c:	9d 81       	ldd	r25, Y+5	; 0x05
 81e:	82 30       	cpi	r24, 0x02	; 2
 820:	91 05       	cpc	r25, r1
 822:	34 f4       	brge	.+12     	; 0x830 <GPIO_GetPinValue+0x4e>
 824:	2c 81       	ldd	r18, Y+4	; 0x04
 826:	3d 81       	ldd	r19, Y+5	; 0x05
 828:	21 15       	cp	r18, r1
 82a:	31 05       	cpc	r19, r1
 82c:	69 f0       	breq	.+26     	; 0x848 <GPIO_GetPinValue+0x66>
 82e:	6b c0       	rjmp	.+214    	; 0x906 <GPIO_GetPinValue+0x124>
 830:	4c 81       	ldd	r20, Y+4	; 0x04
 832:	5d 81       	ldd	r21, Y+5	; 0x05
 834:	42 30       	cpi	r20, 0x02	; 2
 836:	51 05       	cpc	r21, r1
 838:	b9 f1       	breq	.+110    	; 0x8a8 <GPIO_GetPinValue+0xc6>
 83a:	8c 81       	ldd	r24, Y+4	; 0x04
 83c:	9d 81       	ldd	r25, Y+5	; 0x05
 83e:	83 30       	cpi	r24, 0x03	; 3
 840:	91 05       	cpc	r25, r1
 842:	09 f4       	brne	.+2      	; 0x846 <GPIO_GetPinValue+0x64>
 844:	49 c0       	rjmp	.+146    	; 0x8d8 <GPIO_GetPinValue+0xf6>
 846:	5f c0       	rjmp	.+190    	; 0x906 <GPIO_GetPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 848:	e9 e3       	ldi	r30, 0x39	; 57
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	28 2f       	mov	r18, r24
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	88 2f       	mov	r24, r24
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	a9 01       	movw	r20, r18
 85a:	02 c0       	rjmp	.+4      	; 0x860 <GPIO_GetPinValue+0x7e>
 85c:	55 95       	asr	r21
 85e:	47 95       	ror	r20
 860:	8a 95       	dec	r24
 862:	e2 f7       	brpl	.-8      	; 0x85c <GPIO_GetPinValue+0x7a>
 864:	ca 01       	movw	r24, r20
 866:	81 70       	andi	r24, 0x01	; 1
 868:	90 70       	andi	r25, 0x00	; 0
 86a:	88 23       	and	r24, r24
 86c:	19 f0       	breq	.+6      	; 0x874 <GPIO_GetPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	49 c0       	rjmp	.+146    	; 0x906 <GPIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 874:	19 82       	std	Y+1, r1	; 0x01
 876:	47 c0       	rjmp	.+142    	; 0x906 <GPIO_GetPinValue+0x124>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 878:	e6 e3       	ldi	r30, 0x36	; 54
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	28 2f       	mov	r18, r24
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	8b 81       	ldd	r24, Y+3	; 0x03
 884:	88 2f       	mov	r24, r24
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	a9 01       	movw	r20, r18
 88a:	02 c0       	rjmp	.+4      	; 0x890 <GPIO_GetPinValue+0xae>
 88c:	55 95       	asr	r21
 88e:	47 95       	ror	r20
 890:	8a 95       	dec	r24
 892:	e2 f7       	brpl	.-8      	; 0x88c <GPIO_GetPinValue+0xaa>
 894:	ca 01       	movw	r24, r20
 896:	81 70       	andi	r24, 0x01	; 1
 898:	90 70       	andi	r25, 0x00	; 0
 89a:	88 23       	and	r24, r24
 89c:	19 f0       	breq	.+6      	; 0x8a4 <GPIO_GetPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	89 83       	std	Y+1, r24	; 0x01
 8a2:	31 c0       	rjmp	.+98     	; 0x906 <GPIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 8a4:	19 82       	std	Y+1, r1	; 0x01
 8a6:	2f c0       	rjmp	.+94     	; 0x906 <GPIO_GetPinValue+0x124>
			}
			break;

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 8a8:	e3 e3       	ldi	r30, 0x33	; 51
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	88 2f       	mov	r24, r24
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	a9 01       	movw	r20, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <GPIO_GetPinValue+0xde>
 8bc:	55 95       	asr	r21
 8be:	47 95       	ror	r20
 8c0:	8a 95       	dec	r24
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <GPIO_GetPinValue+0xda>
 8c4:	ca 01       	movw	r24, r20
 8c6:	81 70       	andi	r24, 0x01	; 1
 8c8:	90 70       	andi	r25, 0x00	; 0
 8ca:	88 23       	and	r24, r24
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <GPIO_GetPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	89 83       	std	Y+1, r24	; 0x01
 8d2:	19 c0       	rjmp	.+50     	; 0x906 <GPIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 8d4:	19 82       	std	Y+1, r1	; 0x01
 8d6:	17 c0       	rjmp	.+46     	; 0x906 <GPIO_GetPinValue+0x124>
			}
			break;

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 8d8:	e0 e3       	ldi	r30, 0x30	; 48
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	80 81       	ld	r24, Z
 8de:	28 2f       	mov	r18, r24
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	88 2f       	mov	r24, r24
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	a9 01       	movw	r20, r18
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <GPIO_GetPinValue+0x10e>
 8ec:	55 95       	asr	r21
 8ee:	47 95       	ror	r20
 8f0:	8a 95       	dec	r24
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <GPIO_GetPinValue+0x10a>
 8f4:	ca 01       	movw	r24, r20
 8f6:	81 70       	andi	r24, 0x01	; 1
 8f8:	90 70       	andi	r25, 0x00	; 0
 8fa:	88 23       	and	r24, r24
 8fc:	19 f0       	breq	.+6      	; 0x904 <GPIO_GetPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	89 83       	std	Y+1, r24	; 0x01
 902:	01 c0       	rjmp	.+2      	; 0x906 <GPIO_GetPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 904:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	  }
   }
	return pin_value;
 906:	89 81       	ldd	r24, Y+1	; 0x01
}
 908:	0f 90       	pop	r0
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	cf 91       	pop	r28
 914:	df 91       	pop	r29
 916:	08 95       	ret

00000918 <GPIO_TogglePinValue>:
 * Description :
 * Toggle the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
void GPIO_TogglePinValue(uint8 port_num, uint8 pin_num)
{
 918:	df 93       	push	r29
 91a:	cf 93       	push	r28
 91c:	00 d0       	rcall	.+0      	; 0x91e <GPIO_TogglePinValue+0x6>
 91e:	00 d0       	rcall	.+0      	; 0x920 <GPIO_TogglePinValue+0x8>
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS))
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	84 30       	cpi	r24, 0x04	; 4
 92c:	08 f0       	brcs	.+2      	; 0x930 <GPIO_TogglePinValue+0x18>
 92e:	6e c0       	rjmp	.+220    	; 0xa0c <GPIO_TogglePinValue+0xf4>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	28 2f       	mov	r18, r24
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	3c 83       	std	Y+4, r19	; 0x04
 938:	2b 83       	std	Y+3, r18	; 0x03
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	9c 81       	ldd	r25, Y+4	; 0x04
 93e:	81 30       	cpi	r24, 0x01	; 1
 940:	91 05       	cpc	r25, r1
 942:	49 f1       	breq	.+82     	; 0x996 <GPIO_TogglePinValue+0x7e>
 944:	2b 81       	ldd	r18, Y+3	; 0x03
 946:	3c 81       	ldd	r19, Y+4	; 0x04
 948:	22 30       	cpi	r18, 0x02	; 2
 94a:	31 05       	cpc	r19, r1
 94c:	2c f4       	brge	.+10     	; 0x958 <GPIO_TogglePinValue+0x40>
 94e:	8b 81       	ldd	r24, Y+3	; 0x03
 950:	9c 81       	ldd	r25, Y+4	; 0x04
 952:	00 97       	sbiw	r24, 0x00	; 0
 954:	61 f0       	breq	.+24     	; 0x96e <GPIO_TogglePinValue+0x56>
 956:	5a c0       	rjmp	.+180    	; 0xa0c <GPIO_TogglePinValue+0xf4>
 958:	2b 81       	ldd	r18, Y+3	; 0x03
 95a:	3c 81       	ldd	r19, Y+4	; 0x04
 95c:	22 30       	cpi	r18, 0x02	; 2
 95e:	31 05       	cpc	r19, r1
 960:	71 f1       	breq	.+92     	; 0x9be <GPIO_TogglePinValue+0xa6>
 962:	8b 81       	ldd	r24, Y+3	; 0x03
 964:	9c 81       	ldd	r25, Y+4	; 0x04
 966:	83 30       	cpi	r24, 0x03	; 3
 968:	91 05       	cpc	r25, r1
 96a:	e9 f1       	breq	.+122    	; 0x9e6 <GPIO_TogglePinValue+0xce>
 96c:	4f c0       	rjmp	.+158    	; 0xa0c <GPIO_TogglePinValue+0xf4>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA,pin_num);
 96e:	ab e3       	ldi	r26, 0x3B	; 59
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	eb e3       	ldi	r30, 0x3B	; 59
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	48 2f       	mov	r20, r24
 97a:	8a 81       	ldd	r24, Y+2	; 0x02
 97c:	28 2f       	mov	r18, r24
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	02 2e       	mov	r0, r18
 986:	02 c0       	rjmp	.+4      	; 0x98c <GPIO_TogglePinValue+0x74>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	0a 94       	dec	r0
 98e:	e2 f7       	brpl	.-8      	; 0x988 <GPIO_TogglePinValue+0x70>
 990:	84 27       	eor	r24, r20
 992:	8c 93       	st	X, r24
 994:	3b c0       	rjmp	.+118    	; 0xa0c <GPIO_TogglePinValue+0xf4>
			break;

		case PORTB_ID:
			TOGGLE_BIT(PORTB,pin_num);
 996:	a8 e3       	ldi	r26, 0x38	; 56
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	e8 e3       	ldi	r30, 0x38	; 56
 99c:	f0 e0       	ldi	r31, 0x00	; 0
 99e:	80 81       	ld	r24, Z
 9a0:	48 2f       	mov	r20, r24
 9a2:	8a 81       	ldd	r24, Y+2	; 0x02
 9a4:	28 2f       	mov	r18, r24
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 2e       	mov	r0, r18
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <GPIO_TogglePinValue+0x9c>
 9b0:	88 0f       	add	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	0a 94       	dec	r0
 9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <GPIO_TogglePinValue+0x98>
 9b8:	84 27       	eor	r24, r20
 9ba:	8c 93       	st	X, r24
 9bc:	27 c0       	rjmp	.+78     	; 0xa0c <GPIO_TogglePinValue+0xf4>
			break;

		case PORTC_ID:
			TOGGLE_BIT(PORTC,pin_num);
 9be:	a5 e3       	ldi	r26, 0x35	; 53
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	e5 e3       	ldi	r30, 0x35	; 53
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	48 2f       	mov	r20, r24
 9ca:	8a 81       	ldd	r24, Y+2	; 0x02
 9cc:	28 2f       	mov	r18, r24
 9ce:	30 e0       	ldi	r19, 0x00	; 0
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	02 2e       	mov	r0, r18
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <GPIO_TogglePinValue+0xc4>
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	0a 94       	dec	r0
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <GPIO_TogglePinValue+0xc0>
 9e0:	84 27       	eor	r24, r20
 9e2:	8c 93       	st	X, r24
 9e4:	13 c0       	rjmp	.+38     	; 0xa0c <GPIO_TogglePinValue+0xf4>
			break;

		case PORTD_ID:
			TOGGLE_BIT(PORTD,pin_num);
 9e6:	a2 e3       	ldi	r26, 0x32	; 50
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e2 e3       	ldi	r30, 0x32	; 50
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	80 81       	ld	r24, Z
 9f0:	48 2f       	mov	r20, r24
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 2e       	mov	r0, r18
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <GPIO_TogglePinValue+0xec>
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	0a 94       	dec	r0
 a06:	e2 f7       	brpl	.-8      	; 0xa00 <GPIO_TogglePinValue+0xe8>
 a08:	84 27       	eor	r24, r20
 a0a:	8c 93       	st	X, r24
			break;
	   }
    }
}
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	cf 91       	pop	r28
 a16:	df 91       	pop	r29
 a18:	08 95       	ret

00000a1a <GPIO_SetupPortDirection>:
 * Description
 * Setup the direction of the required port input/output
 * If the input port number are not correct, the function will not handle the request
 */
void GPIO_SetupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 a1a:	df 93       	push	r29
 a1c:	cf 93       	push	r28
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <GPIO_SetupPortDirection+0x6>
 a20:	00 d0       	rcall	.+0      	; 0xa22 <GPIO_SetupPortDirection+0x8>
 a22:	cd b7       	in	r28, 0x3d	; 61
 a24:	de b7       	in	r29, 0x3e	; 62
 a26:	89 83       	std	Y+1, r24	; 0x01
 a28:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS))
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	84 30       	cpi	r24, 0x04	; 4
 a2e:	08 f5       	brcc	.+66     	; 0xa72 <GPIO_SetupPortDirection+0x58>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	28 2f       	mov	r18, r24
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	3c 83       	std	Y+4, r19	; 0x04
 a38:	2b 83       	std	Y+3, r18	; 0x03
 a3a:	8b 81       	ldd	r24, Y+3	; 0x03
 a3c:	9c 81       	ldd	r25, Y+4	; 0x04
 a3e:	81 30       	cpi	r24, 0x01	; 1
 a40:	91 05       	cpc	r25, r1
 a42:	71 f0       	breq	.+28     	; 0xa60 <GPIO_SetupPortDirection+0x46>
 a44:	2b 81       	ldd	r18, Y+3	; 0x03
 a46:	3c 81       	ldd	r19, Y+4	; 0x04
 a48:	22 30       	cpi	r18, 0x02	; 2
 a4a:	31 05       	cpc	r19, r1
 a4c:	71 f0       	breq	.+28     	; 0xa6a <GPIO_SetupPortDirection+0x50>
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	9c 81       	ldd	r25, Y+4	; 0x04
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	71 f4       	brne	.+28     	; 0xa72 <GPIO_SetupPortDirection+0x58>
		{
		case PORTA_ID:
			DDRA = direction;
 a56:	ea e3       	ldi	r30, 0x3A	; 58
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	80 83       	st	Z, r24
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <GPIO_SetupPortDirection+0x58>
			break;
		case PORTB_ID:
			DDRB = direction;
 a60:	e7 e3       	ldi	r30, 0x37	; 55
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	80 83       	st	Z, r24
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <GPIO_SetupPortDirection+0x58>
			break;
		case PORTC_ID:
			DDRC = direction;
 a6a:	e4 e3       	ldi	r30, 0x34	; 52
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	8a 81       	ldd	r24, Y+2	; 0x02
 a70:	80 83       	st	Z, r24
			break;
		}
	}
}
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	cf 91       	pop	r28
 a7c:	df 91       	pop	r29
 a7e:	08 95       	ret

00000a80 <GPIO_SetupPortValue>:
 * Write the value Logic High or Logic Low on the required port.
 * If the input port number are not correct, the function will not handle the request
 * If the input port number are not correct, The function will return Logic Low.
 */
void GPIO_SetupPortValue(uint8 port_num, uint8 value)
{
 a80:	df 93       	push	r29
 a82:	cf 93       	push	r28
 a84:	00 d0       	rcall	.+0      	; 0xa86 <GPIO_SetupPortValue+0x6>
 a86:	00 d0       	rcall	.+0      	; 0xa88 <GPIO_SetupPortValue+0x8>
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
 a8c:	89 83       	std	Y+1, r24	; 0x01
 a8e:	6a 83       	std	Y+2, r22	; 0x02
	if( (port_num >= NUM_OF_PORTS))
 a90:	89 81       	ldd	r24, Y+1	; 0x01
 a92:	84 30       	cpi	r24, 0x04	; 4
 a94:	90 f5       	brcc	.+100    	; 0xafa <GPIO_SetupPortValue+0x7a>
		{
				/*Do Nothing*/
		}
		else
		{
			switch(port_num)
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	28 2f       	mov	r18, r24
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	3c 83       	std	Y+4, r19	; 0x04
 a9e:	2b 83       	std	Y+3, r18	; 0x03
 aa0:	8b 81       	ldd	r24, Y+3	; 0x03
 aa2:	9c 81       	ldd	r25, Y+4	; 0x04
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	91 05       	cpc	r25, r1
 aa8:	d1 f0       	breq	.+52     	; 0xade <GPIO_SetupPortValue+0x5e>
 aaa:	2b 81       	ldd	r18, Y+3	; 0x03
 aac:	3c 81       	ldd	r19, Y+4	; 0x04
 aae:	22 30       	cpi	r18, 0x02	; 2
 ab0:	31 05       	cpc	r19, r1
 ab2:	2c f4       	brge	.+10     	; 0xabe <GPIO_SetupPortValue+0x3e>
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	9c 81       	ldd	r25, Y+4	; 0x04
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	61 f0       	breq	.+24     	; 0xad4 <GPIO_SetupPortValue+0x54>
 abc:	1e c0       	rjmp	.+60     	; 0xafa <GPIO_SetupPortValue+0x7a>
 abe:	2b 81       	ldd	r18, Y+3	; 0x03
 ac0:	3c 81       	ldd	r19, Y+4	; 0x04
 ac2:	22 30       	cpi	r18, 0x02	; 2
 ac4:	31 05       	cpc	r19, r1
 ac6:	81 f0       	breq	.+32     	; 0xae8 <GPIO_SetupPortValue+0x68>
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	9c 81       	ldd	r25, Y+4	; 0x04
 acc:	83 30       	cpi	r24, 0x03	; 3
 ace:	91 05       	cpc	r25, r1
 ad0:	81 f0       	breq	.+32     	; 0xaf2 <GPIO_SetupPortValue+0x72>
 ad2:	13 c0       	rjmp	.+38     	; 0xafa <GPIO_SetupPortValue+0x7a>
			{
			case PORTA_ID:
				PORTA = value;
 ad4:	eb e3       	ldi	r30, 0x3B	; 59
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	8a 81       	ldd	r24, Y+2	; 0x02
 ada:	80 83       	st	Z, r24
 adc:	0e c0       	rjmp	.+28     	; 0xafa <GPIO_SetupPortValue+0x7a>
				break;

			case PORTB_ID:
				PORTB = value;
 ade:	e8 e3       	ldi	r30, 0x38	; 56
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	8a 81       	ldd	r24, Y+2	; 0x02
 ae4:	80 83       	st	Z, r24
 ae6:	09 c0       	rjmp	.+18     	; 0xafa <GPIO_SetupPortValue+0x7a>
				break;

			case PORTC_ID:
				PORTC = value;
 ae8:	e5 e3       	ldi	r30, 0x35	; 53
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	8a 81       	ldd	r24, Y+2	; 0x02
 aee:	80 83       	st	Z, r24
 af0:	04 c0       	rjmp	.+8      	; 0xafa <GPIO_SetupPortValue+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
 af2:	e2 e3       	ldi	r30, 0x32	; 50
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	8a 81       	ldd	r24, Y+2	; 0x02
 af8:	80 83       	st	Z, r24
				break;
		     }
		}
}
 afa:	0f 90       	pop	r0
 afc:	0f 90       	pop	r0
 afe:	0f 90       	pop	r0
 b00:	0f 90       	pop	r0
 b02:	cf 91       	pop	r28
 b04:	df 91       	pop	r29
 b06:	08 95       	ret

00000b08 <GPIO_GetPortValue>:
 * Description :
 * Read and return the value for the required port, it should be Logic High or Logic Low.
 * If the input port number are not correct, The function will return Logic Low.
 */
uint8 GPIO_GetPortValue(uint8 port_num)
{
 b08:	df 93       	push	r29
 b0a:	cf 93       	push	r28
 b0c:	00 d0       	rcall	.+0      	; 0xb0e <GPIO_GetPortValue+0x6>
 b0e:	00 d0       	rcall	.+0      	; 0xb10 <GPIO_GetPortValue+0x8>
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
 b16:	19 82       	std	Y+1, r1	; 0x01

	if( (port_num >= NUM_OF_PORTS))
 b18:	8a 81       	ldd	r24, Y+2	; 0x02
 b1a:	84 30       	cpi	r24, 0x04	; 4
 b1c:	90 f5       	brcc	.+100    	; 0xb82 <GPIO_GetPortValue+0x7a>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
 b1e:	8a 81       	ldd	r24, Y+2	; 0x02
 b20:	28 2f       	mov	r18, r24
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	3c 83       	std	Y+4, r19	; 0x04
 b26:	2b 83       	std	Y+3, r18	; 0x03
 b28:	8b 81       	ldd	r24, Y+3	; 0x03
 b2a:	9c 81       	ldd	r25, Y+4	; 0x04
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	91 05       	cpc	r25, r1
 b30:	d1 f0       	breq	.+52     	; 0xb66 <GPIO_GetPortValue+0x5e>
 b32:	2b 81       	ldd	r18, Y+3	; 0x03
 b34:	3c 81       	ldd	r19, Y+4	; 0x04
 b36:	22 30       	cpi	r18, 0x02	; 2
 b38:	31 05       	cpc	r19, r1
 b3a:	2c f4       	brge	.+10     	; 0xb46 <GPIO_GetPortValue+0x3e>
 b3c:	8b 81       	ldd	r24, Y+3	; 0x03
 b3e:	9c 81       	ldd	r25, Y+4	; 0x04
 b40:	00 97       	sbiw	r24, 0x00	; 0
 b42:	61 f0       	breq	.+24     	; 0xb5c <GPIO_GetPortValue+0x54>
 b44:	1e c0       	rjmp	.+60     	; 0xb82 <GPIO_GetPortValue+0x7a>
 b46:	2b 81       	ldd	r18, Y+3	; 0x03
 b48:	3c 81       	ldd	r19, Y+4	; 0x04
 b4a:	22 30       	cpi	r18, 0x02	; 2
 b4c:	31 05       	cpc	r19, r1
 b4e:	81 f0       	breq	.+32     	; 0xb70 <GPIO_GetPortValue+0x68>
 b50:	8b 81       	ldd	r24, Y+3	; 0x03
 b52:	9c 81       	ldd	r25, Y+4	; 0x04
 b54:	83 30       	cpi	r24, 0x03	; 3
 b56:	91 05       	cpc	r25, r1
 b58:	81 f0       	breq	.+32     	; 0xb7a <GPIO_GetPortValue+0x72>
 b5a:	13 c0       	rjmp	.+38     	; 0xb82 <GPIO_GetPortValue+0x7a>
		{
		case PORTA_ID:
			port_value = PINA;
 b5c:	e9 e3       	ldi	r30, 0x39	; 57
 b5e:	f0 e0       	ldi	r31, 0x00	; 0
 b60:	80 81       	ld	r24, Z
 b62:	89 83       	std	Y+1, r24	; 0x01
 b64:	0e c0       	rjmp	.+28     	; 0xb82 <GPIO_GetPortValue+0x7a>
			break;

		case PORTB_ID:
			port_value = PINB;
 b66:	e6 e3       	ldi	r30, 0x36	; 54
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	80 81       	ld	r24, Z
 b6c:	89 83       	std	Y+1, r24	; 0x01
 b6e:	09 c0       	rjmp	.+18     	; 0xb82 <GPIO_GetPortValue+0x7a>
			break;

		case PORTC_ID:
			port_value = PINC;
 b70:	e3 e3       	ldi	r30, 0x33	; 51
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	80 81       	ld	r24, Z
 b76:	89 83       	std	Y+1, r24	; 0x01
 b78:	04 c0       	rjmp	.+8      	; 0xb82 <GPIO_GetPortValue+0x7a>
			break;

		case PORTD_ID:
			port_value = PIND;
 b7a:	e0 e3       	ldi	r30, 0x30	; 48
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	89 83       	std	Y+1, r24	; 0x01
			break;
	     }
	}
	return port_value;
 b82:	89 81       	ldd	r24, Y+1	; 0x01
}
 b84:	0f 90       	pop	r0
 b86:	0f 90       	pop	r0
 b88:	0f 90       	pop	r0
 b8a:	0f 90       	pop	r0
 b8c:	cf 91       	pop	r28
 b8e:	df 91       	pop	r29
 b90:	08 95       	ret

00000b92 <main>:
#include "stdio.h"
#include "avr/io.h" /* To use the IO Ports Registers */
#include "util/delay.h"

int main()
{
 b92:	df 93       	push	r29
 b94:	cf 93       	push	r28
 b96:	00 d0       	rcall	.+0      	; 0xb98 <main+0x6>
 b98:	cd b7       	in	r28, 0x3d	; 61
 b9a:	de b7       	in	r29, 0x3e	; 62
	unsigned char count = 0;
 b9c:	19 82       	std	Y+1, r1	; 0x01

	/*Set 7-segment as output bin 0 & 1 & 2 & 4 in PORTB*/
	DDRB  |= (0x17);
 b9e:	a7 e3       	ldi	r26, 0x37	; 55
 ba0:	b0 e0       	ldi	r27, 0x00	; 0
 ba2:	e7 e3       	ldi	r30, 0x37	; 55
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	87 61       	ori	r24, 0x17	; 23
 baa:	8c 93       	st	X, r24
	PORTB &= (~(0xE8));
 bac:	a8 e3       	ldi	r26, 0x38	; 56
 bae:	b0 e0       	ldi	r27, 0x00	; 0
 bb0:	e8 e3       	ldi	r30, 0x38	; 56
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	80 81       	ld	r24, Z
 bb6:	87 71       	andi	r24, 0x17	; 23
 bb8:	8c 93       	st	X, r24

	while(1)
	{
		if((PORTB & 0xE8) == 9)
 bba:	e8 e3       	ldi	r30, 0x38	; 56
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
		{
			count = 0;
		}
		else
		{
			count++;
 bc0:	89 81       	ldd	r24, Y+1	; 0x01
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	89 83       	std	Y+1, r24	; 0x01
		}
		PORTB = (PORTB & 0xE8) | (count & 0x17);
 bc6:	a8 e3       	ldi	r26, 0x38	; 56
 bc8:	b0 e0       	ldi	r27, 0x00	; 0
 bca:	e8 e3       	ldi	r30, 0x38	; 56
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	98 2f       	mov	r25, r24
 bd2:	98 7e       	andi	r25, 0xE8	; 232
 bd4:	89 81       	ldd	r24, Y+1	; 0x01
 bd6:	87 71       	andi	r24, 0x17	; 23
 bd8:	89 2b       	or	r24, r25
 bda:	8c 93       	st	X, r24
 bdc:	ee cf       	rjmp	.-36     	; 0xbba <main+0x28>

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
